{
	"info": {
		"_postman_id": "414bfb25-95c7-4058-bd3e-b1aa9734b956",
		"name": "Test Explore With Me - Comments",
		"description": "Тесты для функционала : добавление комментария",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42988511"
	},
	"item": [
		{
			"name": "Public Functionlity",
			"item": [
				{
					"name": "Получение комментариев события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"\r",
									"        pm.environment.set(\"userId\", null);\r",
									"        pm.environment.set(\"categoryId\", null);\r",
									"        pm.environment.set(\"eventId\", null);\r",
									"        pm.environment.set(\"commentId\", null);\r",
									"        pm.environment.set(\"comment1Id\", null);\r",
									"        pm.environment.set(\"comment2Id\", null);\r",
									"        pm.environment.set(\"event1Id\", null);\r",
									"\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const event1Data = rnd.getEvent(categoryId);\r",
									"        const event1Response = await api.addEvent(userId, event1Data);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(event1Response));\r",
									"        \r",
									"        const event1Id = event1Response.id.toString();\r",
									"        pm.environment.set(\"event1Id\", event1Id);\r",
									"        console.log(\"✅ eventId установлен:\", event1Id);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(event1Id);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment1 = rnd.getComment();\r",
									"        const comment1Response = await api.addComment(comment1, userId, eventId);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment2 = rnd.getComment();\r",
									"        const comment2Response = await api.addComment(comment2, userId, event1Id);\r",
									"        pm.environment.set(\"comment2Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"(async () => {\r",
									"    await main();\r",
									"})().catch(error => {\r",
									"    console.error(\"Необработанная ошибка:\", error);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Проверяем тип ответа (массив или объект)\r",
									"if (Array.isArray(response)) {\r",
									"    pm.test(\"Должен быть найден только два комментария\", function () {\r",
									"        pm.expect(response.length).to.eql(2);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"        const comment1 = response[1];\r",
									"        pm.expect(comment1.id.toString()).to.equal(pm.environment.get(\"comment1Id\").toString());\r",
									"    });\r",
									"    \r",
									"} else if (typeof response === 'object') {\r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        pm.expect(response).to.have.property('id');\r",
									"        pm.expect(response).to.have.property('text');\r",
									"        pm.expect(response).to.have.property('authorId');\r",
									"        pm.expect(response).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        pm.expect(response.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"    });\r",
									"    \r",
									"} else {\r",
									"    pm.test(\"Некорректный формат ответа\", function () {\r",
									"        pm.expect.fail(\"Ответ должен быть объектом или массивом\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/{{eventId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"{{eventId}}",
								"comments"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев события с 1 до 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"                pm.environment.set(\"userId\", null);\r",
									"        pm.environment.set(\"categoryId\", null);\r",
									"        pm.environment.set(\"eventId\", null);\r",
									"        pm.environment.set(\"commentId\", null);\r",
									"        pm.environment.set(\"comment1Id\", null);\r",
									"        pm.environment.set(\"comment2Id\", null);\r",
									"        pm.environment.set(\"event1Id\", null);\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const event1Data = rnd.getEvent(categoryId);\r",
									"        const event1Response = await api.addEvent(userId, event1Data);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(event1Response));\r",
									"        \r",
									"        const event1Id = event1Response.id.toString();\r",
									"        pm.environment.set(\"event1Id\", event1Id);\r",
									"        console.log(\"✅ eventId установлен:\", event1Id);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(event1Id);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment1 = rnd.getComment();\r",
									"        const comment1Response = await api.addComment(comment1, userId, eventId);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment2 = rnd.getComment();\r",
									"        const comment2Response = await api.addComment(comment2, userId, event1Id);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Проверяем тип ответа (массив или объект)\r",
									"if (Array.isArray(response)) {\r",
									"    pm.test(\"Должен быть найден только два комментария\", function () {\r",
									"        pm.expect(response.length).to.eql(1);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment.id.toString()).to.equal(pm.environment.get(\"comment1Id\").toString());\r",
									"    });\r",
									"    \r",
									"} else if (typeof response === 'object') {\r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        pm.expect(response).to.have.property('id');\r",
									"        pm.expect(response).to.have.property('text');\r",
									"        pm.expect(response).to.have.property('authorId');\r",
									"        pm.expect(response).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        pm.expect(response.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"    });\r",
									"    \r",
									"} else {\r",
									"    pm.test(\"Некорректный формат ответа\", function () {\r",
									"        pm.expect.fail(\"Ответ должен быть объектом или массивом\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events/{{eventId}}/comments?from=1&size=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events",
								"{{eventId}}",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "1"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Private Functionality",
			"item": [
				{
					"name": "Создание комментария несуществующим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"New Comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/100000/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"100000",
								"comments",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание комментария несуществующего события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"New Comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Невалидное создание комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление несуществующего комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}/99999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}",
								"99999999"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария другим пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем другого пользователя\");\r",
									"        const user1Response = await api.addUser(rnd.getUser());\r",
									"        pm.environment.set(\"user1Id\", user1Response.id);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments/{{eventId}}/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments",
								"{{eventId}}",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное удаление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное создание комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать оправленному в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"New Commment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария по id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Проверяем тип ответа (массив или объект)\r",
									"if (Array.isArray(response)) {\r",
									"    pm.test(\"Должен быть найден только один комментарий\", function () {\r",
									"        pm.expect(response.length).to.eql(1);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment.id.toString()).to.equal(pm.environment.get(\"commentId\"));\r",
									"    });\r",
									"    \r",
									"} else if (typeof response === 'object') {\r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        pm.expect(response).to.have.property('id');\r",
									"        pm.expect(response).to.have.property('text');\r",
									"        pm.expect(response).to.have.property('authorId');\r",
									"        pm.expect(response).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        pm.expect(response.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"    });\r",
									"    \r",
									"} else {\r",
									"    pm.test(\"Некорректный формат ответа\", function () {\r",
									"        pm.expect.fail(\"Ответ должен быть объектом или массивом\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/comment/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"comment",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"                pm.environment.set(\"userId\", null);\r",
									"        pm.environment.set(\"categoryId\", null);\r",
									"        pm.environment.set(\"eventId\", null);\r",
									"        pm.environment.set(\"commentId\", null);\r",
									"        pm.environment.set(\"comment1Id\", null);\r",
									"        pm.environment.set(\"comment2Id\", null);\r",
									"        pm.environment.set(\"event1Id\", null);\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const event1Data = rnd.getEvent(categoryId);\r",
									"        const event1Response = await api.addEvent(userId, event1Data);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(event1Response));\r",
									"        \r",
									"        const event1Id = event1Response.id.toString();\r",
									"        pm.environment.set(\"event1Id\", event1Id);\r",
									"        console.log(\"✅ eventId установлен:\", event1Id);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(event1Id);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment1 = rnd.getComment();\r",
									"        const comment1Response = await api.addComment(comment1, userId, eventId);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment2 = rnd.getComment();\r",
									"        const comment2Response = await api.addComment(comment2, userId, event1Id);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Проверяем тип ответа (массив или объект)\r",
									"if (Array.isArray(response)) {\r",
									"    pm.test(\"Должен быть найден только два комментария\", function () {\r",
									"        pm.expect(response.length).to.eql(2);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"        const comment1 = response[1];\r",
									"        pm.expect(comment1.id.toString()).to.equal(pm.environment.get(\"comment1Id\").toString());\r",
									"    });\r",
									"    \r",
									"} else if (typeof response === 'object') {\r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        pm.expect(response).to.have.property('id');\r",
									"        pm.expect(response).to.have.property('text');\r",
									"        pm.expect(response).to.have.property('authorId');\r",
									"        pm.expect(response).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        pm.expect(response.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"    });\r",
									"    \r",
									"} else {\r",
									"    pm.test(\"Некорректный формат ответа\", function () {\r",
									"        pm.expect.fail(\"Ответ должен быть объектом или массивом\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев события с 1 до 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"                pm.environment.set(\"userId\", null);\r",
									"        pm.environment.set(\"categoryId\", null);\r",
									"        pm.environment.set(\"eventId\", null);\r",
									"        pm.environment.set(\"commentId\", null);\r",
									"        pm.environment.set(\"comment1Id\", null);\r",
									"        pm.environment.set(\"comment2Id\", null);\r",
									"        pm.environment.set(\"event1Id\", null);\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const event1Data = rnd.getEvent(categoryId);\r",
									"        const event1Response = await api.addEvent(userId, event1Data);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(event1Response));\r",
									"        \r",
									"        const event1Id = event1Response.id.toString();\r",
									"        pm.environment.set(\"event1Id\", event1Id);\r",
									"        console.log(\"✅ eventId установлен:\", event1Id);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(event1Id);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment1 = rnd.getComment();\r",
									"        const comment1Response = await api.addComment(comment1, userId, eventId);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment2 = rnd.getComment();\r",
									"        const comment2Response = await api.addComment(comment2, userId, event1Id);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Проверяем тип ответа (массив или объект)\r",
									"if (Array.isArray(response)) {\r",
									"    pm.test(\"Должен быть найден только два комментария\", function () {\r",
									"        pm.expect(response.length).to.eql(1);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment.id.toString()).to.equal(pm.environment.get(\"comment1Id\").toString());\r",
									"    });\r",
									"    \r",
									"} else if (typeof response === 'object') {\r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        pm.expect(response).to.have.property('id');\r",
									"        pm.expect(response).to.have.property('text');\r",
									"        pm.expect(response).to.have.property('authorId');\r",
									"        pm.expect(response).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        pm.expect(response.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"    });\r",
									"    \r",
									"} else {\r",
									"    pm.test(\"Некорректный формат ответа\", function () {\r",
									"        pm.expect.fail(\"Ответ должен быть объектом или массивом\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}?from=1&size=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}"
							],
							"query": [
								{
									"key": "from",
									"value": "1"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев пользователя",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const event1Data = rnd.getEvent(categoryId);\r",
									"        const event1Response = await api.addEvent(userId, event1Data);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(event1Response));\r",
									"        \r",
									"        const event1Id = event1Response.id.toString();\r",
									"        pm.environment.set(\"event1Id\", event1Id);\r",
									"        console.log(\"✅ eventId установлен:\", event1Id);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(event1Id);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment1 = rnd.getComment();\r",
									"        const comment1Response = await api.addComment(comment1, userId, eventId);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment2 = rnd.getComment();\r",
									"        const comment2Response = await api.addComment(comment2, userId, event1Id);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Проверяем тип ответа (массив или объект)\r",
									"if (Array.isArray(response)) {\r",
									"    pm.test(\"Должен быть найден только три комментария\", function () {\r",
									"        pm.expect(response.length).to.eql(3);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"        const comment1 = response[1];\r",
									"        pm.expect(comment1.id.toString()).to.equal(pm.environment.get(\"comment1Id\").toString());\r",
									"    });\r",
									"    \r",
									"} else if (typeof response === 'object') {\r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        pm.expect(response).to.have.property('id');\r",
									"        pm.expect(response).to.have.property('text');\r",
									"        pm.expect(response).to.have.property('authorId');\r",
									"        pm.expect(response).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        pm.expect(response.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"    });\r",
									"    \r",
									"} else {\r",
									"    pm.test(\"Некорректный формат ответа\", function () {\r",
									"        pm.expect.fail(\"Ответ должен быть объектом или массивом\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев пользователя Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const event1Data = rnd.getEvent(categoryId);\r",
									"        const event1Response = await api.addEvent(userId, event1Data);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(event1Response));\r",
									"        \r",
									"        const event1Id = event1Response.id.toString();\r",
									"        pm.environment.set(\"event1Id\", event1Id);\r",
									"        console.log(\"✅ eventId установлен:\", event1Id);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(event1Id);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment1 = rnd.getComment();\r",
									"        const comment1Response = await api.addComment(comment1, userId, eventId);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment2 = rnd.getComment();\r",
									"        const comment2Response = await api.addComment(comment2, userId, event1Id);\r",
									"        pm.environment.set(\"comment1Id\", comment1Response.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(comment1Response));\r",
									"\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Проверяем тип ответа (массив или объект)\r",
									"if (Array.isArray(response)) {\r",
									"    pm.test(\"Должен быть найден только один комментарий\", function () {\r",
									"        pm.expect(response.length).to.eql(1);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment.id.toString()).to.equal(pm.environment.get(\"comment1Id\").toString());\r",
									"    });\r",
									"    \r",
									"} else if (typeof response === 'object') {\r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        pm.expect(response).to.have.property('id');\r",
									"        pm.expect(response).to.have.property('text');\r",
									"        pm.expect(response).to.have.property('authorId');\r",
									"        pm.expect(response).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        pm.expect(response.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"    });\r",
									"    \r",
									"} else {\r",
									"    pm.test(\"Некорректный формат ответа\", function () {\r",
									"        pm.expect.fail(\"Ответ должен быть объектом или массивом\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments?from=1&size=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "1"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение несуществующего комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/comment/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"comment",
								"99999"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное обновление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать оправленному в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Update Commment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"comments",
								"{{eventId}}",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария другим пользоваталем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем другого пользователя\");\r",
									"        const user1Response = await api.addUser(rnd.getUser());\r",
									"        pm.environment.set(\"user1Id\", user1Response.id);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Update Commment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{user1Id}}/comments/{{eventId}}/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{user1Id}}",
								"comments",
								"{{eventId}}",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Functionality",
			"item": [
				{
					"name": "Получение комментария по id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"// Проверяем тип ответа (массив или объект)\r",
									"if (Array.isArray(response)) {\r",
									"    pm.test(\"Должен быть найден только один комментарий\", function () {\r",
									"        pm.expect(response.length).to.eql(1);\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment).to.have.property('id');\r",
									"        pm.expect(comment).to.have.property('text');\r",
									"        pm.expect(comment).to.have.property('authorId');\r",
									"        pm.expect(comment).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        const comment = response[0];\r",
									"        pm.expect(comment.id.toString()).to.equal(pm.environment.get(\"commentId\"));\r",
									"    });\r",
									"    \r",
									"} else if (typeof response === 'object') {\r",
									"    pm.test(\"Комментарий должен содержать поля\", function () {\r",
									"        pm.expect(response).to.have.property('id');\r",
									"        pm.expect(response).to.have.property('text');\r",
									"        pm.expect(response).to.have.property('authorId');\r",
									"        pm.expect(response).to.have.property('eventId');\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"        pm.expect(response.id.toString()).to.equal(pm.environment.get(\"commentId\").toString());\r",
									"    });\r",
									"    \r",
									"} else {\r",
									"    pm.test(\"Некорректный формат ответа\", function () {\r",
									"        pm.expect.fail(\"Ответ должен быть объектом или массивом\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное удаление комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное обновление комментария Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm, true); // Включить verbose\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        console.log(\"🟢 Начинаем подготовку данных...\");\r",
									"        console.log(\"Создаем пользователя...\");\r",
									"        const userResponse = await api.addUser(rnd.getUser());\r",
									"        console.log(\"Ответ сервера (пользователь):\", JSON.stringify(userResponse));\r",
									"        \r",
									"        const userId = userResponse.id.toString();\r",
									"        pm.environment.set(\"userId\", userId);\r",
									"        console.log(\"✅ userId установлен:\", userId);\r",
									"\r",
									"        console.log(\"Создаем категорию...\");\r",
									"        const categoryResponse = await api.addCategory(rnd.getCategory());\r",
									"        console.log(\"Ответ сервера (категория):\", JSON.stringify(categoryResponse));\r",
									"        \r",
									"        const categoryId = categoryResponse.id.toString();\r",
									"        pm.environment.set(\"categoryId\", categoryId);\r",
									"        console.log(\"✅ categoryId установлен:\", categoryId);\r",
									"\r",
									"        console.log(\"Создаем событие...\");\r",
									"        const eventData = rnd.getEvent(categoryId);\r",
									"        const eventResponse = await api.addEvent(userId, eventData);;\r",
									"        console.log(\"Ответ сервера (событие):\", JSON.stringify(eventResponse));\r",
									"        \r",
									"        const eventId = eventResponse.id.toString();\r",
									"        pm.environment.set(\"eventId\", eventId);\r",
									"        console.log(\"✅ eventId установлен:\", eventId);\r",
									"\r",
									"        console.log(\"Публикуем событие...\");\r",
									"        await api.publishEvent(eventId);\r",
									"        console.log(\"Событие опубликовано\");\r",
									"\r",
									"        console.log(\"Создаем комментарий\");\r",
									"        const comment = rnd.getComment();\r",
									"        const commentResponse = await api.addComment(comment, userId, eventId);\r",
									"        pm.environment.set(\"commentId\", commentResponse.id);\r",
									"        console.log(\"Ответ сервера (комментарий):\", JSON.stringify(commentResponse));\r",
									"\r",
									"        console.log(\"🎉 Все данные подготовлены!\");\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"❌ Ошибка:\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"await main();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('authorId');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать оправленному в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Update Commment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/{{commentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"     async addComment(comment, userId, eventId, verbose=null) {",
					"        return this.post('/users/' + userId + '/comments/' + eventId, comment, \"Ошибка при публикации комментария\");",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomWord}}')",
					"        };",
					"    }",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "categoryId",
			"value": ""
		}
	]
}